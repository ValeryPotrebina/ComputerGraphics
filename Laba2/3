#define _USE_MATH_DEFINES
#include <stdlib.h>
#include <iostream>
#include <GLFW/glfw3.h>
#include <math.h>
#include <vector>
#include <algorithm>

using namespace std;

const float cube_vertex[][3] = {
	{-0.5f, -0.5f, -0.5f},
	{-0.5, 0.5f, -0.5f},
	{0.5f, 0.5f, -0.5f},
	{0.5f, -0.5f, -0.5f},
	{0.5f, -0.5f, 0.5f},
	{0.5f, 0.5f, 0.5f},
	{-0.5f, 0.5f, 0.5f},
	{-0.5f, -0.5f, 0.5f}
};
const uint16_t cube_indicies[] = {
	0, 7, 4, 3,
	7, 6, 5, 4,
	0, 1, 6, 7,
	1, 6, 5, 2,
	0, 1, 2, 3,
	3, 2, 5, 4,
};
const float cube_color[][3] = {
	{1.0f, 0.0f, 0.0f},
	{0.0f, 1.0f, 0.0f},
	{0.0f, 0.0f, 1.0f},
	{1.0f, 1.0f, 0.0f},
	{1.0f, 0.0f, 1.0f},
	{0.0f, 1.0f, 1.0f}
};

class Vertex {
public:
	float *point;

	Vertex(float x, float y, float z) {
		point = new float[3]{ x,y,z };
	}
};
const float color[][3] = {
	{0.4f, 0.8f, 1.f},
	{0.7f, 0.4f, 1.f},
	{1.f, 0.4f, 0.7f},
	{1.f, 0.7f, 0.4f},
};
vector<Vertex> vertex, vertex2;

int n = 12, accuracyX = 2, accuracyY = 2;

int width, height;
float translateX = 0.f, translateY = 0.f, translateZ = 0.f;
float rotateX = 0.f, rotateY = 0.f, rotateZ = 0.f;
float scale = 1.5f;
GLenum mode = GL_FILL;

void key_callback(GLFWwindow*, int, int, int, int);
void addVertex();
void deleteVertex();
void recalculateVertex();

int main() {
	if (!glfwInit()) exit(EXIT_FAILURE);
	GLFWwindow *window;
	window = glfwCreateWindow(1280, 720, "Cubes", NULL, NULL);
	if (!window) {
		glfwTerminate();
		exit(EXIT_FAILURE);
	}
	glfwMakeContextCurrent(window);
	glfwSetKeyCallback(window, key_callback);

	//INIT Vertexes;
	recalculateVertex();

	while (!glfwWindowShouldClose(window)) {
		glEnable(GL_DEPTH_TEST);
		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		glfwGetFramebufferSize(window, &width, &height);
		glViewport(0, 0, width, height);
		float ratio = (float)width / (float)height;
		glPolygonMode(GL_FRONT_AND_BACK, mode);
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		glOrtho(-2 * ratio, 2 * ratio, -2, 2, -10, 10);
		glRotatef(asin(0.5f / sqrt(2)) * 180 / M_PI, 3, 0, 0);
		glRotatef(asin(0.5f / sqrt(1.75f)) * 180 / M_PI, 0, 3, 0);

		glMatrixMode(GL_MODELVIEW);
		glLoadIdentity();

		//AXIS
		glLineWidth(2);
		glBegin(GL_LINES);
		glColor3f(1.0f, 1.0f, 1.0f);
		glVertex3f(0, 0, 0);
		glColor3f(1.0f, 1.0f, 1.0f);
		glVertex3f(2, 0, 0);

		glColor3f(1.0f, 1.0f, 1.0f);
		glVertex3f(0, 0, 0);
		glColor3f(1.0f, 1.0f, 1.0f);
		glVertex3f(0, 2, 0);

		glColor3f(1.0f, 1.0f, 1.0f);
		glVertex3f(0, 0, 0);
		glColor3f(1.0f, 1.0f, 1.0f);
		glVertex3f(0, 0, 4);
		glEnd();

		//STATIC CUBE
		glTranslatef(-1, -1, 0);
		glScalef(0.5f, 0.5f, 0.5f);
		for (int i = 0; i < 6; i++) {
			glBegin(GL_QUADS);
			glColor3fv(cube_color[i]);
			for (int j = 0; j < 4; j++) {
				glVertex3fv(cube_vertex[cube_indicies[i * 4 + j]]);
			}
			glEnd();
		}

		//MAIN
		glLoadIdentity();
		glTranslatef(translateX, translateY, translateZ);
		glRotatef(rotateX, 1, 0, 0);
		glRotatef(rotateY, 0, 1, 0);
		glRotatef(rotateZ, 0, 0, 1);
		glScalef(scale, scale, scale);

		glBegin(GL_QUADS);
		for (int i = 0; i < n * accuracyX * 2; i++) {
			glColor3fv(color[(i % accuracyX + i / accuracyX) % 4]);
			glVertex3fv(vertex[i * 4].point);
			glVertex3fv(vertex[i * 4 + 1].point);
			glVertex3fv(vertex[i * 4 + 2].point);
			glVertex3fv(vertex[i * 4 + 3].point);
		}
		glEnd();

		glBegin(GL_TRIANGLES);
		for (int i = 0; i < n * accuracyY * 2; i++) {
			glColor3fv(color[i % 4]);
			glVertex3fv(vertex2[i * 3].point);
			glVertex3fv(vertex2[i * 3 + 1].point);
			glVertex3fv(vertex2[i * 3 + 2].point);
		}
		glEnd();

		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	glfwDestroyWindow(window);
	glfwTerminate();

	exit(EXIT_SUCCESS);
}

void recalculateVertex() {
	for (int i = 0; i < vertex.size(); i++) {
		delete[] vertex[i].point;
	}
	vertex.clear();
	for (int i = 0; i < vertex2.size(); i++) {
		delete[] vertex2[i].point;
	}
	vertex2.clear();
	float angle = 2 * M_PI / n;

	Vertex *v;
	for (int k = 0; k <= 1; k++) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < accuracyX; j++) {
				v = new Vertex(cos(angle*i)*0.5f / accuracyX * j, (float)k, sin(angle*i)*0.5f / accuracyX * j); vertex.push_back(*v);
				v = new Vertex(cos(angle*i)*0.5f / accuracyX * (j + 1), (float)k, sin(angle*i)*0.5f / accuracyX * (j + 1)); vertex.push_back(*v);
				v = new Vertex(cos(angle*((i + 1) % n))*0.5f / accuracyX * (j + 1), (float)k, sin(angle*((i + 1) % n))*0.5f / accuracyX * (j + 1)); vertex.push_back(*v);
				v = new Vertex(cos(angle*((i + 1) % n))*0.5f / accuracyX * j, (float)k, sin(angle*((i + 1) % n))*0.5f / accuracyX * j); vertex.push_back(*v);

			}
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < accuracyY; j++) {
			v = new Vertex(cos(angle*i)*0.5f, 1.f / accuracyY * j, sin(angle*i)*0.5f); vertex2.push_back(*v);
			v = new Vertex(cos(angle*((i + 1) % n))*0.5f, 1.f / accuracyY * j, sin(angle*((i + 1) % n))*0.5f); vertex2.push_back(*v);
			v = new Vertex(cos(angle*i)*0.5f, 1.f / accuracyY * (j + 1), sin(angle*i)*0.5f); vertex2.push_back(*v);
			v = new Vertex(cos(angle*((i + 1) % n))*0.5f, 1.f / accuracyY * j, sin(angle*((i + 1) % n))*0.5f); vertex2.push_back(*v);
			v = new Vertex(cos(angle*i)*0.5f, 1.f / accuracyY * (j + 1), sin(angle*i)*0.5f); vertex2.push_back(*v);
			v = new Vertex(cos(angle*((i + 1) % n))*0.5f, 1.f / accuracyY * (j + 1), sin(angle*((i + 1) % n))*0.5f); vertex2.push_back(*v);
		}
	}

	vertex.shrink_to_fit();
	vertex2.shrink_to_fit();
}


void key_callback(GLFWwindow *window, int key, int scancode, int action, int mods) {
	if (action == GLFW_REPEAT || action == GLFW_PRESS) {
		switch (key) {
		case GLFW_KEY_W: translateZ -= 0.03f; break;
		case GLFW_KEY_S: translateZ += 0.03f; break;
		case GLFW_KEY_A: translateX -= 0.03f; break;
		case GLFW_KEY_D: translateX += 0.03f; break;
		case GLFW_KEY_Q: translateY -= 0.03f; break;
		case GLFW_KEY_E: translateY += 0.03f; break;
		case GLFW_KEY_J: rotateY -= 2.f; break;
		case GLFW_KEY_L: rotateY += 2.f; break;
		case GLFW_KEY_I: rotateX -= 2.f; break;
		case GLFW_KEY_K: rotateX += 2.f; break;
		case GLFW_KEY_U: rotateZ -= 2.f; break;
		case GLFW_KEY_O: rotateZ += 2.f; break;
		case GLFW_KEY_H: scale += 0.01f; break;
		case GLFW_KEY_G: scale -= 0.01f; break;
		case GLFW_KEY_F: mode == GL_LINE ? mode = GL_FILL : mode = GL_LINE; break;
		case GLFW_KEY_Z: translateX = 0.f; translateY = 0.f; translateZ = 0.f; break;
		case GLFW_KEY_X: rotateX = 0.f; rotateY = 0.f; rotateZ = 0.f; break;
		case GLFW_KEY_C: scale = 1.f; break;
		case GLFW_KEY_1: if (n > 3) { n--; recalculateVertex(); } break;
		case GLFW_KEY_2: n++; recalculateVertex(); break;
		case GLFW_KEY_3: if (accuracyX > 1) { accuracyX--; recalculateVertex(); } break;
		case GLFW_KEY_4: accuracyX++; recalculateVertex(); break;
		case GLFW_KEY_5: if (accuracyY > 1) { accuracyY--; recalculateVertex(); } break;
		case GLFW_KEY_6: accuracyY++; recalculateVertex(); break;
		}
		cout << "N = " << n << "; accuracyX = " << accuracyX << "; accuracyY = " << accuracyY << endl;
	}
}